import { c as clone } from './clone-f35bcc51.js';
import 'node:events';
import './functionName-4d6db487.js';
import './pouchdb-errors.browser.js';
import './spark-md5-2c57e5fc.js';

// this method removes a leaf from a rev tree, independent of its status.
// e.g., by removing an available leaf, it could leave its predecessor as
// a missing leaf and corrupting the tree.
function removeLeafFromRevTree(tree, leafRev) {
  return tree.flatMap((path) => {
    path = removeLeafFromPath(path, leafRev);
    return path ? [path] : [];
  });
}

function removeLeafFromPath(path, leafRev) {
  const tree = clone(path);
  const toVisit = [tree];
  let node;

  while ((node = toVisit.pop())) {
    const { pos, ids: [id, , branches], parent } = node;
    const isLeaf = branches.length === 0;
    const hash = `${pos}-${id}`;

    if (isLeaf && hash === leafRev) {
      if (!parent) {
        // FIXME: we're facing the root, and probably shouldn't just return an empty array (object? null?).
        return null;
      }

      parent.ids[2] = parent.ids[2].filter(function (branchNode) {
        return branchNode[0] !== id;
      });
      return tree;
    }

    for (let i = 0, len = branches.length; i < len; i++) {
      toVisit.push({ pos: pos + 1, ids: branches[i], parent: node });
    }
  }
  return tree;
}

export { removeLeafFromRevTree as r };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVtb3ZlTGVhZkZyb21UcmVlLTM1NjNkMGI2LmpzIiwic291cmNlcyI6WyIuLi9wYWNrYWdlcy9wb3VjaGRiLW1lcmdlL3NyYy9yZW1vdmVMZWFmRnJvbVRyZWUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY2xvbmUgfSBmcm9tICdwb3VjaGRiLXV0aWxzJztcblxuLy8gdGhpcyBtZXRob2QgcmVtb3ZlcyBhIGxlYWYgZnJvbSBhIHJldiB0cmVlLCBpbmRlcGVuZGVudCBvZiBpdHMgc3RhdHVzLlxuLy8gZS5nLiwgYnkgcmVtb3ZpbmcgYW4gYXZhaWxhYmxlIGxlYWYsIGl0IGNvdWxkIGxlYXZlIGl0cyBwcmVkZWNlc3NvciBhc1xuLy8gYSBtaXNzaW5nIGxlYWYgYW5kIGNvcnJ1cHRpbmcgdGhlIHRyZWUuXG5mdW5jdGlvbiByZW1vdmVMZWFmRnJvbVJldlRyZWUodHJlZSwgbGVhZlJldikge1xuICByZXR1cm4gdHJlZS5mbGF0TWFwKChwYXRoKSA9PiB7XG4gICAgcGF0aCA9IHJlbW92ZUxlYWZGcm9tUGF0aChwYXRoLCBsZWFmUmV2KTtcbiAgICByZXR1cm4gcGF0aCA/IFtwYXRoXSA6IFtdO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlTGVhZkZyb21QYXRoKHBhdGgsIGxlYWZSZXYpIHtcbiAgY29uc3QgdHJlZSA9IGNsb25lKHBhdGgpO1xuICBjb25zdCB0b1Zpc2l0ID0gW3RyZWVdO1xuICBsZXQgbm9kZTtcblxuICB3aGlsZSAoKG5vZGUgPSB0b1Zpc2l0LnBvcCgpKSkge1xuICAgIGNvbnN0IHsgcG9zLCBpZHM6IFtpZCwgLCBicmFuY2hlc10sIHBhcmVudCB9ID0gbm9kZTtcbiAgICBjb25zdCBpc0xlYWYgPSBicmFuY2hlcy5sZW5ndGggPT09IDA7XG4gICAgY29uc3QgaGFzaCA9IGAke3Bvc30tJHtpZH1gO1xuXG4gICAgaWYgKGlzTGVhZiAmJiBoYXNoID09PSBsZWFmUmV2KSB7XG4gICAgICBpZiAoIXBhcmVudCkge1xuICAgICAgICAvLyBGSVhNRTogd2UncmUgZmFjaW5nIHRoZSByb290LCBhbmQgcHJvYmFibHkgc2hvdWxkbid0IGp1c3QgcmV0dXJuIGFuIGVtcHR5IGFycmF5IChvYmplY3Q/IG51bGw/KS5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIHBhcmVudC5pZHNbMl0gPSBwYXJlbnQuaWRzWzJdLmZpbHRlcihmdW5jdGlvbiAoYnJhbmNoTm9kZSkge1xuICAgICAgICByZXR1cm4gYnJhbmNoTm9kZVswXSAhPT0gaWQ7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiB0cmVlO1xuICAgIH1cblxuICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBicmFuY2hlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgdG9WaXNpdC5wdXNoKHsgcG9zOiBwb3MgKyAxLCBpZHM6IGJyYW5jaGVzW2ldLCBwYXJlbnQ6IG5vZGUgfSk7XG4gICAgfVxuICB9XG4gIHJldHVybiB0cmVlO1xufVxuXG5leHBvcnQgZGVmYXVsdCByZW1vdmVMZWFmRnJvbVJldlRyZWU7XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBUyxxQkFBcUIsQ0FBQyxJQUFJLEVBQUUsT0FBTyxFQUFFO0FBQzlDLEVBQUUsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxLQUFLO0FBQ2hDLElBQUksSUFBSSxHQUFHLGtCQUFrQixDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztBQUM3QyxJQUFJLE9BQU8sSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBQzlCLEdBQUcsQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQUNEO0FBQ0EsU0FBUyxrQkFBa0IsQ0FBQyxJQUFJLEVBQUUsT0FBTyxFQUFFO0FBQzNDLEVBQUUsTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzNCLEVBQUUsTUFBTSxPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN6QixFQUFFLElBQUksSUFBSSxDQUFDO0FBQ1g7QUFDQSxFQUFFLFFBQVEsSUFBSSxHQUFHLE9BQU8sQ0FBQyxHQUFHLEVBQUUsR0FBRztBQUNqQyxJQUFJLE1BQU0sRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxJQUFJLFFBQVEsQ0FBQyxFQUFFLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQztBQUN4RCxJQUFJLE1BQU0sTUFBTSxHQUFHLFFBQVEsQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDO0FBQ3pDLElBQUksTUFBTSxJQUFJLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUNoQztBQUNBLElBQUksSUFBSSxNQUFNLElBQUksSUFBSSxLQUFLLE9BQU8sRUFBRTtBQUNwQyxNQUFNLElBQUksQ0FBQyxNQUFNLEVBQUU7QUFDbkI7QUFDQSxRQUFRLE9BQU8sSUFBSSxDQUFDO0FBQ3BCLE9BQU87QUFDUDtBQUNBLE1BQU0sTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxVQUFVLFVBQVUsRUFBRTtBQUNqRSxRQUFRLE9BQU8sVUFBVSxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztBQUNwQyxPQUFPLENBQUMsQ0FBQztBQUNULE1BQU0sT0FBTyxJQUFJLENBQUM7QUFDbEIsS0FBSztBQUNMO0FBQ0EsSUFBSSxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUMsRUFBRSxFQUFFO0FBQ3pELE1BQU0sT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7QUFDckUsS0FBSztBQUNMLEdBQUc7QUFDSCxFQUFFLE9BQU8sSUFBSSxDQUFDO0FBQ2Q7Ozs7In0=
