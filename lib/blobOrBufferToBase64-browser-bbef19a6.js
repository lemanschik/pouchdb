var thisBtoa = function (str) {
  return btoa(str);
};

//Can't find original post, but this is close
//http://stackoverflow.com/questions/6965107/ (continues on next line)
//converting-between-strings-and-arraybuffers
function arrayBufferToBinaryString(buffer) {
  var binary = '';
  var bytes = new Uint8Array(buffer);
  var length = bytes.byteLength;
  for (var i = 0; i < length; i++) {
    binary += String.fromCharCode(bytes[i]);
  }
  return binary;
}

// shim for browsers that don't support it
function readAsBinaryString(blob, callback) {
  var reader = new FileReader();
  var hasBinaryString = typeof reader.readAsBinaryString === 'function';
  reader.onloadend = function (e) {
    var result = e.target.result || '';
    if (hasBinaryString) {
      return callback(result);
    }
    callback(arrayBufferToBinaryString(result));
  };
  if (hasBinaryString) {
    reader.readAsBinaryString(blob);
  } else {
    reader.readAsArrayBuffer(blob);
  }
}

function blobToBinaryString(blobOrBuffer, callback) {
  readAsBinaryString(blobOrBuffer, function (bin) {
    callback(bin);
  });
}

function blobToBase64(blobOrBuffer, callback) {
  blobToBinaryString(blobOrBuffer, function (base64) {
    callback(thisBtoa(base64));
  });
}

export { blobToBase64 as a, blobToBinaryString as b, readAsBinaryString as r };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmxvYk9yQnVmZmVyVG9CYXNlNjQtYnJvd3Nlci1iYmVmMTlhNi5qcyIsInNvdXJjZXMiOlsiLi4vcGFja2FnZXMvcG91Y2hkYi1iaW5hcnktdXRpbHMvc3JjL2Jhc2U2NC1icm93c2VyLmpzIiwiLi4vcGFja2FnZXMvcG91Y2hkYi1iaW5hcnktdXRpbHMvc3JjL3JlYWRBc0JpbmFyeVN0cmluZy5qcyIsIi4uL3BhY2thZ2VzL3BvdWNoZGItYmluYXJ5LXV0aWxzL3NyYy9ibG9iT3JCdWZmZXJUb0JpbmFyeVN0cmluZy1icm93c2VyLmpzIiwiLi4vcGFja2FnZXMvcG91Y2hkYi1iaW5hcnktdXRpbHMvc3JjL2Jsb2JPckJ1ZmZlclRvQmFzZTY0LWJyb3dzZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHRoaXNBdG9iID0gZnVuY3Rpb24gKHN0cikge1xuICByZXR1cm4gYXRvYihzdHIpO1xufTtcblxudmFyIHRoaXNCdG9hID0gZnVuY3Rpb24gKHN0cikge1xuICByZXR1cm4gYnRvYShzdHIpO1xufTtcblxuZXhwb3J0IHtcbiAgdGhpc0F0b2IgYXMgYXRvYixcbiAgdGhpc0J0b2EgYXMgYnRvYVxufTsiLCIvL0Nhbid0IGZpbmQgb3JpZ2luYWwgcG9zdCwgYnV0IHRoaXMgaXMgY2xvc2Vcbi8vaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy82OTY1MTA3LyAoY29udGludWVzIG9uIG5leHQgbGluZSlcbi8vY29udmVydGluZy1iZXR3ZWVuLXN0cmluZ3MtYW5kLWFycmF5YnVmZmVyc1xuZnVuY3Rpb24gYXJyYXlCdWZmZXJUb0JpbmFyeVN0cmluZyhidWZmZXIpIHtcbiAgdmFyIGJpbmFyeSA9ICcnO1xuICB2YXIgYnl0ZXMgPSBuZXcgVWludDhBcnJheShidWZmZXIpO1xuICB2YXIgbGVuZ3RoID0gYnl0ZXMuYnl0ZUxlbmd0aDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgIGJpbmFyeSArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ5dGVzW2ldKTtcbiAgfVxuICByZXR1cm4gYmluYXJ5O1xufVxuXG4vLyBzaGltIGZvciBicm93c2VycyB0aGF0IGRvbid0IHN1cHBvcnQgaXRcbmZ1bmN0aW9uIHJlYWRBc0JpbmFyeVN0cmluZyhibG9iLCBjYWxsYmFjaykge1xuICB2YXIgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgdmFyIGhhc0JpbmFyeVN0cmluZyA9IHR5cGVvZiByZWFkZXIucmVhZEFzQmluYXJ5U3RyaW5nID09PSAnZnVuY3Rpb24nO1xuICByZWFkZXIub25sb2FkZW5kID0gZnVuY3Rpb24gKGUpIHtcbiAgICB2YXIgcmVzdWx0ID0gZS50YXJnZXQucmVzdWx0IHx8ICcnO1xuICAgIGlmIChoYXNCaW5hcnlTdHJpbmcpIHtcbiAgICAgIHJldHVybiBjYWxsYmFjayhyZXN1bHQpO1xuICAgIH1cbiAgICBjYWxsYmFjayhhcnJheUJ1ZmZlclRvQmluYXJ5U3RyaW5nKHJlc3VsdCkpO1xuICB9O1xuICBpZiAoaGFzQmluYXJ5U3RyaW5nKSB7XG4gICAgcmVhZGVyLnJlYWRBc0JpbmFyeVN0cmluZyhibG9iKTtcbiAgfSBlbHNlIHtcbiAgICByZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIoYmxvYik7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgcmVhZEFzQmluYXJ5U3RyaW5nO1xuIiwiaW1wb3J0IHJlYWRBc0JpbmFyeVN0cmluZyBmcm9tICcuL3JlYWRBc0JpbmFyeVN0cmluZyc7XG5cbmZ1bmN0aW9uIGJsb2JUb0JpbmFyeVN0cmluZyhibG9iT3JCdWZmZXIsIGNhbGxiYWNrKSB7XG4gIHJlYWRBc0JpbmFyeVN0cmluZyhibG9iT3JCdWZmZXIsIGZ1bmN0aW9uIChiaW4pIHtcbiAgICBjYWxsYmFjayhiaW4pO1xuICB9KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmxvYlRvQmluYXJ5U3RyaW5nOyIsImltcG9ydCB7IGJ0b2EgfSBmcm9tICcuL2Jhc2U2NC5qcyc7XG5pbXBvcnQgYmxvYk9yQnVmZmVyVG9CaW5hcnlTdHJpbmcgZnJvbSAnLi9ibG9iT3JCdWZmZXJUb0JpbmFyeVN0cmluZy5qcyc7XG5cbmZ1bmN0aW9uIGJsb2JUb0Jhc2U2NChibG9iT3JCdWZmZXIsIGNhbGxiYWNrKSB7XG4gIGJsb2JPckJ1ZmZlclRvQmluYXJ5U3RyaW5nKGJsb2JPckJ1ZmZlciwgZnVuY3Rpb24gKGJhc2U2NCkge1xuICAgIGNhbGxiYWNrKGJ0b2EoYmFzZTY0KSk7XG4gIH0pO1xufVxuXG5leHBvcnQgZGVmYXVsdCBibG9iVG9CYXNlNjQ7Il0sIm5hbWVzIjpbImJsb2JPckJ1ZmZlclRvQmluYXJ5U3RyaW5nIiwiYnRvYSJdLCJtYXBwaW5ncyI6IkFBSUEsSUFBSSxRQUFRLEdBQUcsVUFBVSxHQUFHLEVBQUU7QUFDOUIsRUFBRSxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNuQixDQUFDOztBQ05EO0FBQ0E7QUFDQTtBQUNBLFNBQVMseUJBQXlCLENBQUMsTUFBTSxFQUFFO0FBQzNDLEVBQUUsSUFBSSxNQUFNLEdBQUcsRUFBRSxDQUFDO0FBQ2xCLEVBQUUsSUFBSSxLQUFLLEdBQUcsSUFBSSxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDckMsRUFBRSxJQUFJLE1BQU0sR0FBRyxLQUFLLENBQUMsVUFBVSxDQUFDO0FBQ2hDLEVBQUUsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtBQUNuQyxJQUFJLE1BQU0sSUFBSSxNQUFNLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzVDLEdBQUc7QUFDSCxFQUFFLE9BQU8sTUFBTSxDQUFDO0FBQ2hCLENBQUM7QUFDRDtBQUNBO0FBQ0EsU0FBUyxrQkFBa0IsQ0FBQyxJQUFJLEVBQUUsUUFBUSxFQUFFO0FBQzVDLEVBQUUsSUFBSSxNQUFNLEdBQUcsSUFBSSxVQUFVLEVBQUUsQ0FBQztBQUNoQyxFQUFFLElBQUksZUFBZSxHQUFHLE9BQU8sTUFBTSxDQUFDLGtCQUFrQixLQUFLLFVBQVUsQ0FBQztBQUN4RSxFQUFFLE1BQU0sQ0FBQyxTQUFTLEdBQUcsVUFBVSxDQUFDLEVBQUU7QUFDbEMsSUFBSSxJQUFJLE1BQU0sR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sSUFBSSxFQUFFLENBQUM7QUFDdkMsSUFBSSxJQUFJLGVBQWUsRUFBRTtBQUN6QixNQUFNLE9BQU8sUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzlCLEtBQUs7QUFDTCxJQUFJLFFBQVEsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0FBQ2hELEdBQUcsQ0FBQztBQUNKLEVBQUUsSUFBSSxlQUFlLEVBQUU7QUFDdkIsSUFBSSxNQUFNLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDcEMsR0FBRyxNQUFNO0FBQ1QsSUFBSSxNQUFNLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDbkMsR0FBRztBQUNIOztBQzNCQSxTQUFTLGtCQUFrQixDQUFDLFlBQVksRUFBRSxRQUFRLEVBQUU7QUFDcEQsRUFBRSxrQkFBa0IsQ0FBQyxZQUFZLEVBQUUsVUFBVSxHQUFHLEVBQUU7QUFDbEQsSUFBSSxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDbEIsR0FBRyxDQUFDLENBQUM7QUFDTDs7QUNIQSxTQUFTLFlBQVksQ0FBQyxZQUFZLEVBQUUsUUFBUSxFQUFFO0FBQzlDLEVBQUVBLGtCQUEwQixDQUFDLFlBQVksRUFBRSxVQUFVLE1BQU0sRUFBRTtBQUM3RCxJQUFJLFFBQVEsQ0FBQ0MsUUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7QUFDM0IsR0FBRyxDQUFDLENBQUM7QUFDTDs7OzsifQ==
