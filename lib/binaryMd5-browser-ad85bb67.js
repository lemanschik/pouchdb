import { a as thisBtoa } from './base64-browser-5f7b6479.js';
import { r as readAsArrayBuffer } from './readAsArrayBuffer-625b2d33.js';
import { M as Md5 } from './spark-md5-2c57e5fc.js';

var setImmediateShim = self.setImmediate || self.setTimeout;
var MD5_CHUNK_SIZE = 32768;

function rawToBase64(raw) {
  return thisBtoa(raw);
}

function sliceBlob(blob, start, end) {
  if (blob.webkitSlice) {
    return blob.webkitSlice(start, end);
  }
  return blob.slice(start, end);
}

function appendBlob(buffer, blob, start, end, callback) {
  if (start > 0 || end < blob.size) {
    // only slice blob if we really need to
    blob = sliceBlob(blob, start, end);
  }
  readAsArrayBuffer(blob, function (arrayBuffer) {
    buffer.append(arrayBuffer);
    callback();
  });
}

function appendString(buffer, string, start, end, callback) {
  if (start > 0 || end < string.length) {
    // only create a substring if we really need to
    string = string.substring(start, end);
  }
  buffer.appendBinary(string);
  callback();
}

function binaryMd5(data, callback) {
  var inputIsString = typeof data === 'string';
  var len = inputIsString ? data.length : data.size;
  var chunkSize = Math.min(MD5_CHUNK_SIZE, len);
  var chunks = Math.ceil(len / chunkSize);
  var currentChunk = 0;
  var buffer = inputIsString ? new Md5() : new Md5.ArrayBuffer();

  var append = inputIsString ? appendString : appendBlob;

  function next() {
    setImmediateShim(loadNextChunk);
  }

  function done() {
    var raw = buffer.end(true);
    var base64 = rawToBase64(raw);
    callback(base64);
    buffer.destroy();
  }

  function loadNextChunk() {
    var start = currentChunk * chunkSize;
    var end = start + chunkSize;
    currentChunk++;
    if (currentChunk < chunks) {
      append(buffer, data, start, end, next);
    } else {
      append(buffer, data, start, end, done);
    }
  }
  loadNextChunk();
}

export { binaryMd5 as b };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmluYXJ5TWQ1LWJyb3dzZXItYWQ4NWJiNjcuanMiLCJzb3VyY2VzIjpbIi4uL3BhY2thZ2VzL3BvdWNoZGItbWQ1L3NyYy9iaW5hcnlNZDUtYnJvd3Nlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBidG9hLCByZWFkQXNBcnJheUJ1ZmZlciB9IGZyb20gJ3BvdWNoZGItYmluYXJ5LXV0aWxzJztcbmltcG9ydCBNZDUgZnJvbSAnc3BhcmstbWQ1JztcbnZhciBzZXRJbW1lZGlhdGVTaGltID0gc2VsZi5zZXRJbW1lZGlhdGUgfHwgc2VsZi5zZXRUaW1lb3V0O1xudmFyIE1ENV9DSFVOS19TSVpFID0gMzI3Njg7XG5cbmZ1bmN0aW9uIHJhd1RvQmFzZTY0KHJhdykge1xuICByZXR1cm4gYnRvYShyYXcpO1xufVxuXG5mdW5jdGlvbiBzbGljZUJsb2IoYmxvYiwgc3RhcnQsIGVuZCkge1xuICBpZiAoYmxvYi53ZWJraXRTbGljZSkge1xuICAgIHJldHVybiBibG9iLndlYmtpdFNsaWNlKHN0YXJ0LCBlbmQpO1xuICB9XG4gIHJldHVybiBibG9iLnNsaWNlKHN0YXJ0LCBlbmQpO1xufVxuXG5mdW5jdGlvbiBhcHBlbmRCbG9iKGJ1ZmZlciwgYmxvYiwgc3RhcnQsIGVuZCwgY2FsbGJhY2spIHtcbiAgaWYgKHN0YXJ0ID4gMCB8fCBlbmQgPCBibG9iLnNpemUpIHtcbiAgICAvLyBvbmx5IHNsaWNlIGJsb2IgaWYgd2UgcmVhbGx5IG5lZWQgdG9cbiAgICBibG9iID0gc2xpY2VCbG9iKGJsb2IsIHN0YXJ0LCBlbmQpO1xuICB9XG4gIHJlYWRBc0FycmF5QnVmZmVyKGJsb2IsIGZ1bmN0aW9uIChhcnJheUJ1ZmZlcikge1xuICAgIGJ1ZmZlci5hcHBlbmQoYXJyYXlCdWZmZXIpO1xuICAgIGNhbGxiYWNrKCk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBhcHBlbmRTdHJpbmcoYnVmZmVyLCBzdHJpbmcsIHN0YXJ0LCBlbmQsIGNhbGxiYWNrKSB7XG4gIGlmIChzdGFydCA+IDAgfHwgZW5kIDwgc3RyaW5nLmxlbmd0aCkge1xuICAgIC8vIG9ubHkgY3JlYXRlIGEgc3Vic3RyaW5nIGlmIHdlIHJlYWxseSBuZWVkIHRvXG4gICAgc3RyaW5nID0gc3RyaW5nLnN1YnN0cmluZyhzdGFydCwgZW5kKTtcbiAgfVxuICBidWZmZXIuYXBwZW5kQmluYXJ5KHN0cmluZyk7XG4gIGNhbGxiYWNrKCk7XG59XG5cbmZ1bmN0aW9uIGJpbmFyeU1kNShkYXRhLCBjYWxsYmFjaykge1xuICB2YXIgaW5wdXRJc1N0cmluZyA9IHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJztcbiAgdmFyIGxlbiA9IGlucHV0SXNTdHJpbmcgPyBkYXRhLmxlbmd0aCA6IGRhdGEuc2l6ZTtcbiAgdmFyIGNodW5rU2l6ZSA9IE1hdGgubWluKE1ENV9DSFVOS19TSVpFLCBsZW4pO1xuICB2YXIgY2h1bmtzID0gTWF0aC5jZWlsKGxlbiAvIGNodW5rU2l6ZSk7XG4gIHZhciBjdXJyZW50Q2h1bmsgPSAwO1xuICB2YXIgYnVmZmVyID0gaW5wdXRJc1N0cmluZyA/IG5ldyBNZDUoKSA6IG5ldyBNZDUuQXJyYXlCdWZmZXIoKTtcblxuICB2YXIgYXBwZW5kID0gaW5wdXRJc1N0cmluZyA/IGFwcGVuZFN0cmluZyA6IGFwcGVuZEJsb2I7XG5cbiAgZnVuY3Rpb24gbmV4dCgpIHtcbiAgICBzZXRJbW1lZGlhdGVTaGltKGxvYWROZXh0Q2h1bmspO1xuICB9XG5cbiAgZnVuY3Rpb24gZG9uZSgpIHtcbiAgICB2YXIgcmF3ID0gYnVmZmVyLmVuZCh0cnVlKTtcbiAgICB2YXIgYmFzZTY0ID0gcmF3VG9CYXNlNjQocmF3KTtcbiAgICBjYWxsYmFjayhiYXNlNjQpO1xuICAgIGJ1ZmZlci5kZXN0cm95KCk7XG4gIH1cblxuICBmdW5jdGlvbiBsb2FkTmV4dENodW5rKCkge1xuICAgIHZhciBzdGFydCA9IGN1cnJlbnRDaHVuayAqIGNodW5rU2l6ZTtcbiAgICB2YXIgZW5kID0gc3RhcnQgKyBjaHVua1NpemU7XG4gICAgY3VycmVudENodW5rKys7XG4gICAgaWYgKGN1cnJlbnRDaHVuayA8IGNodW5rcykge1xuICAgICAgYXBwZW5kKGJ1ZmZlciwgZGF0YSwgc3RhcnQsIGVuZCwgbmV4dCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFwcGVuZChidWZmZXIsIGRhdGEsIHN0YXJ0LCBlbmQsIGRvbmUpO1xuICAgIH1cbiAgfVxuICBsb2FkTmV4dENodW5rKCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJpbmFyeU1kNTsiXSwibmFtZXMiOlsiYnRvYSJdLCJtYXBwaW5ncyI6Ijs7OztBQUVBLElBQUksZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLFlBQVksSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDO0FBQzVELElBQUksY0FBYyxHQUFHLEtBQUssQ0FBQztBQUMzQjtBQUNBLFNBQVMsV0FBVyxDQUFDLEdBQUcsRUFBRTtBQUMxQixFQUFFLE9BQU9BLFFBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNuQixDQUFDO0FBQ0Q7QUFDQSxTQUFTLFNBQVMsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRTtBQUNyQyxFQUFFLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRTtBQUN4QixJQUFJLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDeEMsR0FBRztBQUNILEVBQUUsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQztBQUNoQyxDQUFDO0FBQ0Q7QUFDQSxTQUFTLFVBQVUsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFO0FBQ3hELEVBQUUsSUFBSSxLQUFLLEdBQUcsQ0FBQyxJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxFQUFFO0FBQ3BDO0FBQ0EsSUFBSSxJQUFJLEdBQUcsU0FBUyxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDdkMsR0FBRztB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
