export { a as base64StringToBlobOrBuffer, b as binaryStringToBlobOrBuffer } from './base64StringToBlobOrBuffer-browser-cdc72594.js';
export { a as blobOrBufferToBase64, b as blobOrBufferToBinaryString, r as readAsBinaryString } from './blobOrBufferToBase64-browser-bbef19a6.js';

// From http://stackoverflow.com/questions/14967647/ (continues on next line)
// encode-decode-image-with-base64-breaks-image (2013-04-21)
function binaryStringToArrayBuffer(bin) {
  var length = bin.length;
  var buf = new ArrayBuffer(length);
  var arr = new Uint8Array(buf);
  for (var i = 0; i < length; i++) {
    arr[i] = bin.charCodeAt(i);
  }
  return buf;
}

// simplified API. universal browser support is assumed
function readAsArrayBuffer(blob, callback) {
  var reader = new FileReader();
  reader.onloadend = function (e) {
    var result = e.target.result || new ArrayBuffer(0);
    callback(result);
  };
  reader.readAsArrayBuffer(blob);
}

// this is not used in the browser
function typedBuffer() {
}

const atob = globalThis.atob;
const btoa = globalThis.btoa;

export { atob, binaryStringToArrayBuffer, btoa, readAsArrayBuffer, typedBuffer };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG91Y2hkYi1iaW5hcnktdXRpbHMuYnJvd3Nlci5qcyIsInNvdXJjZXMiOlsiLi4vcGFja2FnZXMvcG91Y2hkYi1iaW5hcnktdXRpbHMvc3JjL2JpbmFyeVN0cmluZ1RvQXJyYXlCdWZmZXIuanMiLCIuLi9wYWNrYWdlcy9wb3VjaGRiLWJpbmFyeS11dGlscy9zcmMvcmVhZEFzQXJyYXlCdWZmZXIuanMiLCIuLi9wYWNrYWdlcy9wb3VjaGRiLWJpbmFyeS11dGlscy9zcmMvdHlwZWRCdWZmZXItYnJvd3Nlci5qcyIsIi4uL3BhY2thZ2VzL3BvdWNoZGItYmluYXJ5LXV0aWxzL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGcm9tIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTQ5Njc2NDcvIChjb250aW51ZXMgb24gbmV4dCBsaW5lKVxuLy8gZW5jb2RlLWRlY29kZS1pbWFnZS13aXRoLWJhc2U2NC1icmVha3MtaW1hZ2UgKDIwMTMtMDQtMjEpXG5mdW5jdGlvbiBiaW5hcnlTdHJpbmdUb0FycmF5QnVmZmVyKGJpbikge1xuICB2YXIgbGVuZ3RoID0gYmluLmxlbmd0aDtcbiAgdmFyIGJ1ZiA9IG5ldyBBcnJheUJ1ZmZlcihsZW5ndGgpO1xuICB2YXIgYXJyID0gbmV3IFVpbnQ4QXJyYXkoYnVmKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgIGFycltpXSA9IGJpbi5jaGFyQ29kZUF0KGkpO1xuICB9XG4gIHJldHVybiBidWY7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJpbmFyeVN0cmluZ1RvQXJyYXlCdWZmZXI7IiwiLy8gc2ltcGxpZmllZCBBUEkuIHVuaXZlcnNhbCBicm93c2VyIHN1cHBvcnQgaXMgYXNzdW1lZFxuZnVuY3Rpb24gcmVhZEFzQXJyYXlCdWZmZXIoYmxvYiwgY2FsbGJhY2spIHtcbiAgdmFyIHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XG4gIHJlYWRlci5vbmxvYWRlbmQgPSBmdW5jdGlvbiAoZSkge1xuICAgIHZhciByZXN1bHQgPSBlLnRhcmdldC5yZXN1bHQgfHwgbmV3IEFycmF5QnVmZmVyKDApO1xuICAgIGNhbGxiYWNrKHJlc3VsdCk7XG4gIH07XG4gIHJlYWRlci5yZWFkQXNBcnJheUJ1ZmZlcihibG9iKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgcmVhZEFzQXJyYXlCdWZmZXI7XG4iLCIvLyB0aGlzIGlzIG5vdCB1c2VkIGluIHRoZSBicm93c2VyXG5mdW5jdGlvbiB0eXBlZEJ1ZmZlcigpIHtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdHlwZWRCdWZmZXI7IiwiaW1wb3J0IGJhc2U2NFN0cmluZ1RvQmxvYk9yQnVmZmVyIGZyb20gJy4vYmFzZTY0U3RyaW5nVG9CbG9iT3JCdWZmZXInO1xuaW1wb3J0IGJpbmFyeVN0cmluZ1RvQXJyYXlCdWZmZXIgZnJvbSAnLi9iaW5hcnlTdHJpbmdUb0FycmF5QnVmZmVyJztcbmltcG9ydCBiaW5hcnlTdHJpbmdUb0Jsb2JPckJ1ZmZlciBmcm9tICcuL2JpbmFyeVN0cmluZ1RvQmxvYk9yQnVmZmVyJztcblxuaW1wb3J0IGJsb2JPckJ1ZmZlclRvQmFzZTY0IGZyb20gJy4vYmxvYk9yQnVmZmVyVG9CYXNlNjQnO1xuaW1wb3J0IGJsb2JPckJ1ZmZlclRvQmluYXJ5U3RyaW5nIGZyb20gJy4vYmxvYk9yQnVmZmVyVG9CaW5hcnlTdHJpbmcnO1xuaW1wb3J0IHJlYWRBc0FycmF5QnVmZmVyIGZyb20gJy4vcmVhZEFzQXJyYXlCdWZmZXInO1xuaW1wb3J0IHJlYWRBc0JpbmFyeVN0cmluZyBmcm9tICcuL3JlYWRBc0JpbmFyeVN0cmluZyc7XG5pbXBvcnQgdHlwZWRCdWZmZXIgZnJvbSAnLi90eXBlZEJ1ZmZlcic7XG5leHBvcnQgY29uc3QgYXRvYiA9IGdsb2JhbFRoaXMuYXRvYjtcbmV4cG9ydCBjb25zdCBidG9hID0gZ2xvYmFsVGhpcy5idG9hO1xuLy8gZXhwb3J0IGNvbnN0IGJsb2IgPSAoZGF0YSkgPT4gbmV3IEJsb2IoW10uY29uY2F0KGRhdGEpKTtcbmV4cG9ydCB7XG4gIGJhc2U2NFN0cmluZ1RvQmxvYk9yQnVmZmVyLFxuICBiaW5hcnlTdHJpbmdUb0FycmF5QnVmZmVyLFxuICBiaW5hcnlTdHJpbmdUb0Jsb2JPckJ1ZmZlcixcbiAgYmxvYk9yQnVmZmVyVG9CYXNlNjQsXG4gIGJsb2JPckJ1ZmZlclRvQmluYXJ5U3RyaW5nLFxuICByZWFkQXNBcnJheUJ1ZmZlcixcbiAgcmVhZEFzQmluYXJ5U3RyaW5nLFxuICB0eXBlZEJ1ZmZlclxufTsiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUE7QUFDQTtBQUNBLFNBQVMseUJBQXlCLENBQUMsR0FBRyxFQUFFO0FBQ3hDLEVBQUUsSUFBSSxNQUFNLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQztBQUMxQixFQUFFLElBQUksR0FBRyxHQUFHLElBQUksV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ3BDLEVBQUUsSUFBSSxHQUFHLEdBQUcsSUFBSSxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDaEMsRUFBRSxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO0FBQ25DLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDL0IsR0FBRztBQUNILEVBQUUsT0FBTyxHQUFHLENBQUM7QUFDYjs7QUNWQTtBQUNBLFNBQVMsaUJBQWlCLENBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRTtBQUMzQyxFQUFFLElBQUksTUFBTSxHQUFHLElBQUksVUFBVSxFQUFFLENBQUM7QUFDaEMsRUFBRSxNQUFNLENBQUMsU0FBUyxHQUFHLFVBQVUsQ0FBQyxFQUFFO0FBQ2xDLElBQUksSUFBSSxNQUFNLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLElBQUksSUFBSSxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDdkQsSUFBSSxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDckIsR0FBRyxDQUFDO0FBQ0osRUFBRSxNQUFNLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDakM7O0FDUkE7QUFDQSxTQUFTLFdBQVcsR0FBRztBQUN2Qjs7QUNPWSxNQUFDLElBQUksR0FBRyxVQUFVLENBQUMsS0FBSztBQUN4QixNQUFDLElBQUksR0FBRyxVQUFVLENBQUM7Ozs7In0=
