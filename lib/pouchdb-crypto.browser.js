async function digestFromMessage(message,algo='SHA-256') {
    const msgUint8 = new TextEncoder().encode(message);
    const arrayBuffer = await crypto.subtle.digest(algo, msgUint8); // hash the message
        
    return { 
        digist(format='hex') {
            const formats = {
                hex: () => 
                Array.from(new Uint8Array(arrayBuffer))
                // converted buffer to byte array
                .map((b) => b.toString(16).padStart(2, "0"))
                .join(""), // converted bytes to hex string;
            };
            // Fails by design with wrong format            
            return formats[format]();
        } 
    };
}

 
const base64encoderStream = {
    transform(data,ready) {
        let reader = new FileReader();        
        reader.onloadend = () => {
            ready.enqueue(reader.result.split(';base64,',1));
            reader = null;
        };
        reader.readAsDataURL(new Blob(data));
    }
};

//new TransformStream(base64encoderStream)

// Old But gold
function blobToBase64(blobOrBuffer, callback) {
    new Response(blobOrBuffer).arrayBuffer().then((arrayBuffer) => btoa(
    String.fromCharCode(
    ...new Uint8Array(arrayBuffer)
    ))).then((b64)=>callback(null,b64),err=>callback(err));
   //callback(blobOrBuffer.toString('binary'));
}
// eg "digest":"md5-yDbs1scfYdqqLpxyFb1gFw==",
// base642hex new Buffer('yDbs1scfYdqqLpxyFb1gFw==', 'base64').toString('hex')
// hex2base64 new Buffer('c836ecd6c71f61daaa2e9c7215bd6017', 'hex').toString('base64')

// Reverse: await fetch(`data:image/jpeg;base64,${base64Data}`);
const toBase64 = (blob) => new Promise((resolve, reject) => {
    const reader = new FileReader;
    reader.onerror = reject;
    reader.onload = () => {
        resolve(reader.result.split('base64,',1)[1]);
    };
    reader.readAsDataURL(new Blob([].concat(blob)));
});


//import { md5, sha1, sha512, sha3 } from 'hash-wasm'
// replaces stringMd5 returns hex should also use message.normalize('NFKC')
const createoldMD5 = (message="") => import('./index.esm-984d0fb2.js').then(({ md5 }) => md5(new TextEncoder().encode(message)));
const stringMd5 = async (message="") => (await import('./index.esm-984d0fb2.js')).md5(message);

export { base64encoderStream, blobToBase64, createoldMD5, digestFromMessage, stringMd5, toBase64 };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG91Y2hkYi1jcnlwdG8uYnJvd3Nlci5qcyIsInNvdXJjZXMiOlsiLi4vcGFja2FnZXMvcG91Y2hkYi1jcnlwdG8vaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGRpZ2VzdEZyb21NZXNzYWdlKG1lc3NhZ2UsYWxnbz0nU0hBLTI1NicpIHtcbiAgICBjb25zdCBtc2dVaW50OCA9IG5ldyBUZXh0RW5jb2RlcigpLmVuY29kZShtZXNzYWdlKTtcbiAgICBjb25zdCBhcnJheUJ1ZmZlciA9IGF3YWl0IGNyeXB0by5zdWJ0bGUuZGlnZXN0KGFsZ28sIG1zZ1VpbnQ4KTsgLy8gaGFzaCB0aGUgbWVzc2FnZVxuICAgICAgICBcbiAgICByZXR1cm4geyBcbiAgICAgICAgZGlnaXN0KGZvcm1hdD0naGV4Jykge1xuICAgICAgICAgICAgY29uc3QgZm9ybWF0cyA9IHtcbiAgICAgICAgICAgICAgICBoZXg6ICgpID0+IFxuICAgICAgICAgICAgICAgIEFycmF5LmZyb20obmV3IFVpbnQ4QXJyYXkoYXJyYXlCdWZmZXIpKVxuICAgICAgICAgICAgICAgIC8vIGNvbnZlcnRlZCBidWZmZXIgdG8gYnl0ZSBhcnJheVxuICAgICAgICAgICAgICAgIC5tYXAoKGIpID0+IGIudG9TdHJpbmcoMTYpLnBhZFN0YXJ0KDIsIFwiMFwiKSlcbiAgICAgICAgICAgICAgICAuam9pbihcIlwiKSwgLy8gY29udmVydGVkIGJ5dGVzIHRvIGhleCBzdHJpbmc7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgLy8gRmFpbHMgYnkgZGVzaWduIHdpdGggd3JvbmcgZm9ybWF0ICAgICAgICAgICAgXG4gICAgICAgICAgICByZXR1cm4gZm9ybWF0c1tmb3JtYXRdKCk7XG4gICAgICAgIH0gXG4gICAgfTtcbn1cblxuIFxuZXhwb3J0IGNvbnN0IGJhc2U2NGVuY29kZXJTdHJlYW0gPSB7XG4gICAgdHJhbnNmb3JtKGRhdGEscmVhZHkpIHtcbiAgICAgICAgbGV0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7ICAgICAgICBcbiAgICAgICAgcmVhZGVyLm9ubG9hZGVuZCA9ICgpID0+IHtcbiAgICAgICAgICAgIHJlYWR5LmVucXVldWUocmVhZGVyLnJlc3VsdC5zcGxpdCgnO2Jhc2U2NCwnLDEpKTtcbiAgICAgICAgICAgIHJlYWRlciA9IG51bGw7XG4gICAgICAgIH07XG4gICAgICAgIHJlYWRlci5yZWFkQXNEYXRhVVJMKG5ldyBCbG9iKGRhdGEpKTtcbiAgICB9XG59O1xuXG4vL25ldyBUcmFuc2Zvcm1TdHJlYW0oYmFzZTY0ZW5jb2RlclN0cmVhbSlcblxuLy8gT2xkIEJ1dCBnb2xkXG5leHBvcnQgZnVuY3Rpb24gYmxvYlRvQmFzZTY0KGJsb2JPckJ1ZmZlciwgY2FsbGJhY2spIHtcbiAgICBuZXcgUmVzcG9uc2UoYmxvYk9yQnVmZmVyKS5hcnJheUJ1ZmZlcigpLnRoZW4oKGFycmF5QnVmZmVyKSA9PiBidG9hKFxuICAgIFN0cmluZy5mcm9tQ2hhckNvZGUoXG4gICAgLi4ubmV3IFVpbnQ4QXJyYXkoYXJyYXlCdWZmZXIpXG4gICAgKSkpLnRoZW4oKGI2NCk9PmNhbGxiYWNrKG51bGwsYjY0KSxlcnI9PmNhbGxiYWNrKGVycikpO1xuICAgLy9jYWxsYmFjayhibG9iT3JCdWZmZXIudG9TdHJpbmcoJ2JpbmFyeScpKTtcbn1cbi8vIGVnIFwiZGlnZXN0XCI6XCJtZDUteURiczFzY2ZZZHFxTHB4eUZiMWdGdz09XCIsXG4vLyBiYXNlNjQyaGV4IG5ldyBCdWZmZXIoJ3lEYnMxc2NmWWRxcUxweHlGYjFnRnc9PScsICdiYXNlNjQnKS50b1N0cmluZygnaGV4Jylcbi8vIGhleDJiYXNlNjQgbmV3IEJ1ZmZlcignYzgzNmVjZDZjNzFmNjFkYWFhMmU5YzcyMTViZDYwMTcnLCAnaGV4JykudG9TdHJpbmcoJ2Jhc2U2NCcpXG5cbi8vIFJldmVyc2U6IGF3YWl0IGZldGNoKGBkYXRhOmltYWdlL2pwZWc7YmFzZTY0LCR7YmFzZTY0RGF0YX1gKTtcbmV4cG9ydCBjb25zdCB0b0Jhc2U2NCA9IChibG9iKSA9PiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgY29uc3QgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXI7XG4gICAgcmVhZGVyLm9uZXJyb3IgPSByZWplY3Q7XG4gICAgcmVhZGVyLm9ubG9hZCA9ICgpID0+IHtcbiAgICAgICAgcmVzb2x2ZShyZWFkZXIucmVzdWx0LnNwbGl0KCdiYXNlNjQsJywxKVsxXSk7XG4gICAgfTtcbiAgICByZWFkZXIucmVhZEFzRGF0YVVSTChuZXcgQmxvYihbXS5jb25jYXQoYmxvYikpKTtcbn0pO1xuXG5cbi8vaW1wb3J0IHsgbWQ1LCBzaGExLCBzaGE1MTIsIHNoYTMgfSBmcm9tICdoYXNoLXdhc20nXG4vLyByZXBsYWNlcyBzdHJpbmdNZDUgcmV0dXJucyBoZXggc2hvdWxkIGFsc28gdXNlIG1lc3NhZ2Uubm9ybWFsaXplKCdORktDJylcbmV4cG9ydCBjb25zdCBjcmVhdGVvbGRNRDUgPSAobWVzc2FnZT1cIlwiKSA9PiBpbXBvcnQoJ2hhc2gtd2FzbScpLnRoZW4oKHsgbWQ1IH0pID0+IG1kNShuZXcgVGV4dEVuY29kZXIoKS5lbmNvZGUobWVzc2FnZSkpKTtcbmV4cG9ydCBjb25zdCBzdHJpbmdNZDUgPSBhc3luYyAobWVzc2FnZT1cIlwiKSA9PiAoYXdhaXQgaW1wb3J0KCdoYXNoLXdhc20nKSkubWQ1KG1lc3NhZ2UpOyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBTyxlQUFlLGlCQUFpQixDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFO0FBQ2hFLElBQUksTUFBTSxRQUFRLEdBQUcsSUFBSSxXQUFXLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDdkQsSUFBSSxNQUFNLFdBQVcsR0FBRyxNQUFNLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQztBQUNuRTtBQUNBLElBQUksT0FBTztBQUNYLFFB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
